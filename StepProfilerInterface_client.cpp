/*
 * Generated by erpcgen 1.11.0 on Wed Jan 31 00:53:05 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */

#include "pch.h"
#include "infra/erpc_client_manager.h"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include "port/erpc_port.h"
#endif
#include "infra/erpc_codec.hpp"
extern "C"
{
#include "StepProfilerInterface.h"
}

#if 11100 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

extern ClientManager *g_client;


// StepProfiler interface Z_Home function client shim.
void Z_Home(void)
{
    erpc_status_t err = kErpcStatus_Success;


#if ERPC_PRE_POST_ACTION
    pre_post_action_cb preCB = g_client->getPreCB();
    if (preCB)
    {
        preCB();
    }
#endif

    // Get a new request.
    RequestContext request = g_client->createRequest(true);

    // Encode the request.
    Codec * codec = request.getCodec();

    codec->startWriteMessage(kOnewayMessage, kStepProfiler_service_id, kStepProfiler_Z_Home_id, request.getSequence());

    // Send message to server
    // Codec status is checked inside this function.
    g_client->performRequest(request);

    err = codec->getStatus();

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, kStepProfiler_Z_Home_id);

#if ERPC_PRE_POST_ACTION
    pre_post_action_cb postCB = g_client->getPostCB();
    if (postCB)
    {
        postCB();
    }
#endif


    return;
}

// StepProfiler interface Y_Home function client shim.
void Y_Home(void)
{
    erpc_status_t err = kErpcStatus_Success;


#if ERPC_PRE_POST_ACTION
    pre_post_action_cb preCB = g_client->getPreCB();
    if (preCB)
    {
        preCB();
    }
#endif

    // Get a new request.
    RequestContext request = g_client->createRequest(true);

    // Encode the request.
    Codec * codec = request.getCodec();

    codec->startWriteMessage(kOnewayMessage, kStepProfiler_service_id, kStepProfiler_Y_Home_id, request.getSequence());

    // Send message to server
    // Codec status is checked inside this function.
    g_client->performRequest(request);

    err = codec->getStatus();

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, kStepProfiler_Y_Home_id);

#if ERPC_PRE_POST_ACTION
    pre_post_action_cb postCB = g_client->getPostCB();
    if (postCB)
    {
        postCB();
    }
#endif


    return;
}

// StepProfiler interface Z_Run function client shim.
void Z_Run(int32_t dir)
{
    erpc_status_t err = kErpcStatus_Success;


#if ERPC_PRE_POST_ACTION
    pre_post_action_cb preCB = g_client->getPreCB();
    if (preCB)
    {
        preCB();
    }
#endif

    // Get a new request.
    RequestContext request = g_client->createRequest(true);

    // Encode the request.
    Codec * codec = request.getCodec();

    codec->startWriteMessage(kOnewayMessage, kStepProfiler_service_id, kStepProfiler_Z_Run_id, request.getSequence());

    codec->write(dir);

    // Send message to server
    // Codec status is checked inside this function.
    g_client->performRequest(request);

    err = codec->getStatus();

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, kStepProfiler_Z_Run_id);

#if ERPC_PRE_POST_ACTION
    pre_post_action_cb postCB = g_client->getPostCB();
    if (postCB)
    {
        postCB();
    }
#endif


    return;
}

// StepProfiler interface Y_Run function client shim.
void Y_Run(int32_t dir)
{
    erpc_status_t err = kErpcStatus_Success;


#if ERPC_PRE_POST_ACTION
    pre_post_action_cb preCB = g_client->getPreCB();
    if (preCB)
    {
        preCB();
    }
#endif

    // Get a new request.
    RequestContext request = g_client->createRequest(true);

    // Encode the request.
    Codec * codec = request.getCodec();

    codec->startWriteMessage(kOnewayMessage, kStepProfiler_service_id, kStepProfiler_Y_Run_id, request.getSequence());

    codec->write(dir);

    // Send message to server
    // Codec status is checked inside this function.
    g_client->performRequest(request);

    err = codec->getStatus();

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, kStepProfiler_Y_Run_id);

#if ERPC_PRE_POST_ACTION
    pre_post_action_cb postCB = g_client->getPostCB();
    if (postCB)
    {
        postCB();
    }
#endif


    return;
}

// StepProfiler interface setForce function client shim.
void setForce(int32_t force)
{
    erpc_status_t err = kErpcStatus_Success;


#if ERPC_PRE_POST_ACTION
    pre_post_action_cb preCB = g_client->getPreCB();
    if (preCB)
    {
        preCB();
    }
#endif

    // Get a new request.
    RequestContext request = g_client->createRequest(true);

    // Encode the request.
    Codec * codec = request.getCodec();

    codec->startWriteMessage(kOnewayMessage, kStepProfiler_service_id, kStepProfiler_setForce_id, request.getSequence());

    codec->write(force);

    // Send message to server
    // Codec status is checked inside this function.
    g_client->performRequest(request);

    err = codec->getStatus();

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, kStepProfiler_setForce_id);

#if ERPC_PRE_POST_ACTION
    pre_post_action_cb postCB = g_client->getPostCB();
    if (postCB)
    {
        postCB();
    }
#endif


    return;
}

// StepProfiler interface getLVDTStatus function client shim.
int32_t getLVDTStatus(void)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

#if ERPC_PRE_POST_ACTION
    pre_post_action_cb preCB = g_client->getPreCB();
    if (preCB)
    {
        preCB();
    }
#endif

    // Get a new request.
    RequestContext request = g_client->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    codec->startWriteMessage(kInvocationMessage, kStepProfiler_service_id, kStepProfiler_getLVDTStatus_id, request.getSequence());

    // Send message to server
    // Codec status is checked inside this function.
    g_client->performRequest(request);

    codec->read(result);

    err = codec->getStatus();

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, kStepProfiler_getLVDTStatus_id);

#if ERPC_PRE_POST_ACTION
    pre_post_action_cb postCB = g_client->getPostCB();
    if (postCB)
    {
        postCB();
    }
#endif


    if (err != kErpcStatus_Success)
    {
        result = -1;
    }

    return result;
}
